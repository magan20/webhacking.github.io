03. 웹 애플리케이션 기술
    1. HTTP 프로토콜
        - 분산 애플리케이션: 비중앙집권 애플리케이션, 중앙 컨트롤의 주체가 없음
        - TCP: 전송제어 프로토콜(Transmission Control Protocol: TCP) 프로그램간의 데이터 교환을 통제하는 프로토콜, 브라우저가 서버에 연결할 때 사용, 파일 전송에도 사용
        - 비연결지향적(connectionless)
        - HTTP는 메시지 기반 모델로서 클라이언트가 요청을 보내고 서버가 그에 대한 응답 메시지를 보내는 방식 

        1_1. HTTP 요청
            - 인터넷 상에서 가장 일반적으로 쓰이는 HTTP 버전은 1.0과 1.1이고 대부분의 브라우저는 초기 값으로 1.1을 씀
            - Referer 헤더: 해당 요청이 이전에 어디서부터 요청을 받았는지에 대한 URL을 나타냄
            - User-Agent: 브라우저나 기타 클라이언트의 소프트웨어 정보를 보여주고 있음.
            - 모질라: 넷스케이프 팀이 중심이 되어 구성한 자유 소프트웨어 커뮤니티
            - Host 헤더: URL주소에 나타난 호스트명을 자세하게 나타내기 위해 사용/ 제일 처음 요청한 url에는 호스트 명이 없다
            - 쿠키 헤더: 서버가 클라이언트에게 전송한 인자 값에 추가 정보를 보낼 때 사용
        1_2. HTTP 응답
            - 모든 HTTP 응답의 첫번째 줄에는 다음의 세가지 요소가 있다.
                ㄴhttp 버전
                ㄴ요청에 대한 결과 코드
                ㄴ응답에 대한 상황을 설명해 주는 문자열
            - Set-Cookie 헤더가 브라우저에게 쿠키에 대한 정보를 전달, 쿠키 정보는 클라이언트가 향후 서버에게 페이지를 요청할 때 쿠키 형태로 사용
            - Pragma 헤더: 브라우저가 응답한 내용을 캐시에 저장하지 않게 지시
            - 대부분의 http 응답은 헤더다음에 메시지 바디가 따라 나옴
            - Content-Type: 메시지 바디에 HTML 문서가 있음을 알려줌
            - Content-Length: 메시지 바디 길이를 바이트 단위로 나타냄
        1_3. HTTP 메소드
            - GET 메소드는 웹 서버에 있는 자원을 얻을 때 사용
            - 주소창에 URL을 한번 입력하면 브라우저 히스토리나 웹서버의 로그 같은 곳에 저장된다.
            - 쿼리 문자열에는 중요한 정보가 들어있어서는 안된다.
            - POST 메소드를 통해 한번 이상의 액션이 실행된 경우, 브라우저는 사용자가 보댄 요청을 바로 수락하지 않음
        1_4. URL
            - url 형식: 프로토콜://호스트명[:포트번호]/[경로/]파일명[?쿼리스트링]
        1_5. HTTP 헤더
            - 일반적인 헤더
            - 요청 헤더
            - 응답 헤더
        1_6. 쿠키
            - 웹 애플리케이션이 사용자를 구분할 때 쿠키를 사용
            - 공격자가 웹 애플리케이션의 취약점을 찾을 때 쿠키를 많이 사용
            - 쿠키 메커니즘
                ㄴ1. 서버가 클라이언트에게 데이터를 보낼 수 있게 함
                ㄴ2. 클라이언트가 쿠키를 저장해 뒀다가 다시 서버로 보냄
            - 특별한 행동 없이도 서버로 페이지를 요청할 때마다 쿠키를 사용
            - Set-Cookie 헤더를 통해 쿠키를 생성하고 클라이언트에게 보냄
            - 쿠키를 받은 사용자의 브라우저는 서버로 보내는 요청에 Cookie 헤더를 더함(Set-Cookie와 Cookie는 다른 헤더임)
            - Set-Cookie 헤더는 여러 속성들을 추가적으로 포함할 수 있음
                ㄴExpires: 쿠키의 유효 기간을 나타냄, 이 속성이 없으면 쿠키는 현제 작업 세션에서만 사용
                ㄴdomain: 쿠키를 사용할 수 있는 도메인을 나타냄
                ㄴpath: 쿠키가 사용할 수 있는 url 경로를 나타냄
                ㄴsecure: 이 속성이 설정되면 쿠키는 HTTPS 요청으로만 전송
                ㄴHttpOnly: 이 속성이 설정되면 클라이언트 쪽의 자바스크립트로 직접 접근할 수 없음
        1_7. 상태 코드
            - 1**: 정보를 제공함
            - 2**: 요청이 성공적으로 이뤄짐
            - 3**요청한 해당 자원이 다른 곳에 있음
            - 4**: 요청(클라이언트)에 문제가 있음
            - 5**: 서버에 에러가 있음
        1_8. HTTPS
            - http 프로토콜은 데이터가 네트워크를 통과할 때 암호화되지 않은 단순한 TCP를 사용하기 때문에 공격자가 중간에 데이터를 가로챌 수 있다.
            - https는 http와 같이 애플리케이션 계층 프로토콜로 SSL을 이용해 클라이언트와 서버 사이에 주고받는 정보를 보호하는 데 사용
            - http 요청과 응답 기능은 SSL이 사용되는지에 대한 유무에 상관없이 정상적으로 동일하게 작동
        1_9. HTTP 프록시
            - HTTP 프록시 서버는 클라이언트 브아루저와 목적지 웹서버 간에 중개 역할을 한다.
            - 데이터 교환 방식
                ㄴ1. 브라우저가 프록시 서버를 사용하게 되면 모든 요청은 프록시로 설정한 서버에게 보내짐
                ㄴ2. 프록시 서버는 클라이언트의 요청을 관련된 웹 서버에게 전달
                ㄴ3. 서버로부터 응답을 받아서 다시 브라우저에게 전달
            - 대부분의 프록시는 캐싱, 인증, 전근통제와 같은 서비스를 제공
            - TCP레벨에서 사용하는 프록시는 HTTPS를 이용하는 브라우저에서도 데이터를 가로챌 수 있다.
            - HTTPS 프로토콜에서 프록시를 이용한 통신
                ㄴ1. 브라우저가 CONNECT 메소드를 이용해서 프록시 서버에게 HTTP 요청을 함
                ㄴ2. URL에 목적지 호스트명과 포트 번호를 자세하게 기술
                ㄴ3. 프록시가 요청을 수락하면 상태 코드 200으로 HTTP 응답을 보냄
                ㄴ4. 그 후 TCP연결을 열고 TCP레벨 릴레이로써 목적지 웹서버에 보냄
            - 웹 애플리케이션을 공격할 때 사용하는 도구 중 제일 유용한 도구는 공격자의 브라우저와 목적지 웹사이트 사이에 특수하게 조작된 프록시 서버이다.
        1_10. HTTP 인증
            - HTTP 인증 방법
                ㄴBasic: 각 메시지 요청 헤더에 Base64로 암호화한 문자열을 사용자 자격 증명으로 보냄
                ㄴNTLM: 시도/응답 방법으로, 윈도우 NTLM 프로토콜 사용
                ㄴDigest: 시도/응답 방법으로, MD5 체크섬을 사용
    
    2. 웹 기능
        - 웹 애플리케이션은 통신 프로토콜 뿐 아니라 수많은 기술들을 사용
        - 애플리케이션을 공격하기 전에 웹 애플리케이션에서 사용하고 있는 기술은 어떤 것이 있으며, 어떻게 동작하는지, 취약점이 무엇인지 알아야 됨
        2_1. 서버 측 기능
            - 오늘날 대부분의 자료는 정적인 형태(HTML 페이지) 뿐 아니라 동적인 형태로도 자료를 많이 제공
            - 동적인 컨텐츠는 서버에서 실행되는 스크립트나 다른 코드로 작동
            - HTTP에서 서버에게 인자를 보낼 때 사용하는 방법
                ㄴ1. URL 쿼리 문자열 이용
                ㄴ2. HTTP 쿠리를 이용
                ㄴ3. 요청 바디에 POST 방식 이용
            2_1_1. 자바 플랫폼
                - 선 마이크로시스템 사에서 개발한 것으로 멀티계층과 로드 밸런스 아키텍처에 최적화
                    ㄴ엔터프라이즈 자바 빈(EJB): 애플리케이션 내 비즈니스 기능에 대한 로직을 캡슐화, 처리 무결성과 같은 기술적 부분을 도와줌
                    ㄴPOJO: EJB와 같은 특수 객체와 다르게 가볍과 간단, 사용자 정의 객체를 이용하거나 다른 프레임워크에서 사용된 객체를 나타낼 때 사용
                    ㄴ자바 서블릿: 애플리케이션 서버에 존재하는 객체, 클라이언트로부터 HTTP 요청을 받고 응답하는 역할
                    ㄴ자바 웹 컨테이너: 자바 기반의 웹 애플리케이션의 실시간 환경을 제공해주는 플랫폼이나 엔진
            2_1_2. ASP.NET
                - 서버측 스크립팅 언어
                - 마이크로소프트 사의 웹 애플리케이션 프레임워크
                - ASP.NET은 가상 머신과 강력한 API 등을 제공하는 닷넷 프레임워크를 사용
                - 개발자의 최소한의 노력으로도 XSS 취약점으로부터 웹 애플리케이션을 보호
                - api: application programming interface, 응용 프로그램에서 사용할 수 있도록, 운영체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스
            2_1_3. PHP
                - 개인적으로 시작한 작은 프로젝트였으나 지금은 웨 애플리케이션에 있어 강력하고 거대한 프레임워크가 됬다.
                - php는 무료이고 사용하기도 쉽기 때문에 초보자들이 웹 애플리케이션을 만들 때 많이 사용
                - php로 작성된 애플리케이션은 수많은 보안 취약점을 갖게 됨
                - 결점이 php 플랫폼 자체에 있기 때문에 애플리케이션 태생부터 취약점을 갖게 됨
        2_2. 클라이언트 측 기능
            - 애플리케이션이 사용자에게 응답을 전달하여면 클라이언트 측 사용자 인터페이스를 제공할 필요가 있음
            - 모든 웹 애플리케이션은 웹 브라우러를 통해 접근하기 때문에 사용자 인터페이스는 일반적인 핵심 기술을 공유함
            2_2_1. HTML
                - 태그를 기반으로 한 언어이며 브라우저 안의 문서를 기술할 때 사용
            2_2_2. 하이퍼링크
                - 웹 애플리케이션에서는 하이퍼링크가 미리 만들어진 요청 인자를 포함하고 있음
                - 요청 인자는 사용자에 의해 만들어지지는 않지만 하이퍼링크 내에 원하는 항목을 놓음으로써 사용자가 클릭할 때 서버로 전송
                - 사용자가 하이퍼링크를 클릭하여 서버에게 다양한 요청을 보냄 
            2_2_3. 폼
                - 사용자로부터 받는 입력 값과 행동에 대해 유연성을 가질 필요가 있다.
                - HTML 폼은 사용자가 브라우저를 통해 원하는 입력값을 넣을 수 있게 함
                - HTML 폼 태그가 POST 메소드를 포함하고 있기 때문에 브라우저는 폼을 전송하기 위해 POST 메소드를 사용하고 요청 메시지의 내용에 폼으로부터 받은 데이터를 넣는다.
            2_2_4. 자바스크립트
                - 하이퍼링크와 폼은 웹 애플리케이션이 요구하는 모든 종류의 입력 값에 대한 사용자 인터페이스를 만드는데 사용할 수 있다.
                - 클라이언트 측이 실제 데이터를 전송하기도 함
                    ㄴ1. 특정 기능에 대한 요청과 응답이 클라이언트 측 컴포넌트에 의해서 처리될 수도 있기 때문에 실행 속도를 향상시킬 수 있다.
                    ㄴ2. 서버에 의해 HTML 페이지 전체를 새로 받지 않아도 사용자 인터페이스 일부분이 동적으로 업데이트 하기 때문에 편리성이 증가한다.
                - 자박스크립트의 기능
                    ㄴ1. 사용자가 입력한 데이터의 유효성을 확인해서 불필요한 요청을 서버에 전달하는 것을 막는다
                    ㄴ2. 사용자의 행동에 응답해 사용자 인터페이스를 동적으로 수정
                    ㄴ3. 브라우저 내의 DOM의 조회와 업데이트를 함으로써 브라우저의 동작을 조회
                - AJAX 기법은 빠르고 만족스러운 사용자 인터페이스를 제공하지만 제대로 관리되지 않으면 공격자들에게 좋은 환경을 제공할 수도 있다.
            2_2_5. 씩 클라이언트 컴포넌트
                -1. 자바 애플릿
                -2. 액티브X 컨트롤
                -3. 쇽웨이브 플래시 객체
        2_3. 상태와 세션
            - 웹 기술들은 웹 애플리케이션의 서버와 클라이언트 컴포넌트를 사용해서 다양한 방법으로 데이터를 교환하고 처리하기 위한 것들이다.
            - 애플리케이션들은 각 사용자와 애플리케이션 사이에 전송되는 다양한 요청들의 대화 상태를 살펴 볼 필요가 있다.
            - 애플리케이션은 수많은 요청을 거친 사용자의 행동들이 만들어 낸 상태 데이터를 가지고 있어야 하는데, 이 데이터는 보통 세션이라 불리는 서버 측의 구조 안에 있음
            - HTTP 프로토콜 자체가 상태 기반이 아니기 때문에 대부분의 애플리케이션들은 사용자들을 재확인 하여 각 요청에 알맞는 상태 데이터를 사용하게 해야 한다.
    3. 인코딩 스키마
        - 웹 애플리케이션은 애플리케이션 데이터에 여러 가지 인코딩 스키마를 사용
        - 생소한 문자나 바이너리 데이터가 안전하게 사용되기 위해 여러가지 인코딩 스키마가 개발됐다.
        - 웹 애플리케이션을 공격할 때 인코딩 스키마를 사용하여 데이터를 변경해야 될 필요가 있다.
        3_1. URL 인코딩
            - URL은 US-ASCII 문자 집합에서 출력 가능한 문자들만 포함한다. 아스키 코드가 0x20~0x7e의 범위에 있다면 이것도 포함
            - URL 인코딩 스키마는 확장된 아스키 문자 내에서 문제가 있는 문자들을 인코딩할 때 사용
            - +는 URL 인코딩을 할 때 띄어 쓰기를 의미하며, %20으로 표현
        3_2. 유니코드 인코딩
            - 유니코드는 문자 인코딩 표준으로, 전 세계에 쓰이는 모든 문서 작성 시스템을 제공한다. 
            - 웹 애플리케이션을 공격하는게 목적이라면 유니코드 인코딩은 무엇보다 중요
            - 유니코드 인코딩 문자를 이용하여 입력 필터를 우회할 수 있다.
            3_3_1 16비트 유니코드 인코딩
                - HTTP를 통해서 전송될 때 16비트 유니코드 인토딩 형식으로 된 문자는 %u가 앞에 나오고 그 위에는 16진수로 표기된 유니코드 문자가 따라온다.
            3_2_2 UTF-8
                - 다양한 길이의 인코딩 기준으로, 각각의 문자를 나타내기 위해 하나 이상의 바이트를 사용
                - HTTP를 통해 전송될 때 UTF-8인코딩 형식의 문자는 제일 앞부분에 %가 붙고, 바로 뒤에는 문자의 바이트를 16진법으로 나타낸 숫자가 따라온다.
        3_3. HTML 인코딩
            - 문제가 있을만한 문자들을 인코딩하여 안전하게 HTML 문서와 함께 사용하게 함
            - 다양한 문자들은 메타문자로서 HTML 안에서 특병한 의미를 지니고, 문서의 구성보다는 그 내용을 정의하는 데 사용
            - 웹 애플리케이션에서 크로스사이트 스크립팅 취약점을 찾을 때 HTML 인코딩을 눈여겨 봐야 함.
            - 애플리케이션이 사용자에게 입력 값을 수정하지 않고 다시 되돌려준다면 취약점이 존재할 가능성이 높다.
        3_4. Base64 인코딩
            - 모든 바이너리 데이터를 출력 가능한 ASCII문자들을 통해서만 안전하게 나타낼 수 있게 함
            - Base64 인코딩은 이메일 첨부 파일들을 인코딩해서 SMTP를 통해 안전하게 전송하거나 HTTP 승인을 할 결우 사용자의 인증서를 인코딩 할 때 사용
            - 많은 웹 애플리케이션은 쿠키나 다른 매개변수에 데이터를 전송할 때 악의적인 공격자로부터 데이터에 대한 변경을 받기 위해 Base64 인코딩을 사용
            - Base64 인토딩 스트링은 그 만의 특정한 문자 집합과 스트링의 마지막에 나타난 =문자들 때문에 쉽게 구별할 수 있다.
        3_5. Hex 인코딩
            - 수많은 애플리케이션은 바이너리 데이터를 전송할 때 ASCII문자들과 함께 곧바로 Hex인코딩을 사용함
            - Hex인코딩은 대부분 숫자로만 이루어져 있음



            


