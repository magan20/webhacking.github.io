05. 클라이언트 즉 통제 우회
    - 씩 클라이언트(thick client): 네트워크를 통해 서버와 연결하여 쓸 수는 있지만, 서버 시스템에 대한 연결이 없어도 되는 컴퓨터
    1. 클라이언트를 통한 데이터 전송
        - 히든 폼의 데이터, url 매개변수, 헤더의 데이터 등 애플리케이션에서는 클라이언트로 데이터를 전송해 클라이언트로 부터 요청이 올 때 다시 읽어들인다.
        - 애플리케이션이 클라이언트로 데이터를 전송했다가 다시 읽어 들이는 이유 
            ㄴ 사용자의 세션에 사용되는 모든 종류의 데이터를 일일이 관리해 줄 필요가 없음
            ㄴ 세션당 서버에 저장되는 데이터의 양을 줄이면 애플리케이션의 성능을 향상시킬 수 있음
            ㄴ 분산 데이터베이스를 사용하여 서버를 관리하고 있을 때 사용자들이 하나 이상의 서버와 통신하면서 여러 단계의 업무를 처리해야 할 때 동일 사용자의 요청을 처리하기 위해 서버 간에 서버 측 데이터를 공유하는 것은 단순하지 않음. 이 경우 클라이언트를 통해 데이터를 전송하는 것은 좋은 문제 해결 방안이 됨
        1_1. 숨겨진 폼 필드
            - 숨겨진 폼 필드: 클라이언트를 통해 외관상으로는 변조할 수 없는 방식으로 데이터를 전송할 수 있게 하는 보편적인 메커니즘
                ㄴ 화면에는 필드가 나타나지 않지만 필드명과 값을 폼 내에 저장해 사용자가 폼을 애플리케이션에 전송할 때 함께 보내짐
            - hidden 폼에 데이커 값이 숨겨져 있을 때 프록시를 이용하여 데이터를 가로채 값을 변조할 수 있다.
            - 대부분의 경우 애플리케이션은 음수 가격을 받아들이는 것을 볼 수 있으므로 이런 취약점을 가진 애플리케이션을 발견하면 음수 값을 넣어볼 수 있다.
        1_2. HTTP 쿠키
            - 쿠키는 화면에 보이지도 않고 사용자에 의해 직접 수정가능하지도 않으므로 클라이언크를 통해 데이터를 전송할 때 쿠키를 이용할 수 있다.
            - 헤더의 Set-Cookie 키 값에는 세션 아이디와 사용자 식별자(user id) 등이 들어있다.
            - 세션 id와 세션 토큰의 차이: 애플리케이션에서 인증 상태를 유지하려면 사용자에 대한 정보를 참조하는데 사용되는 토큰이 필요함, 세션 id는 쿠키 값에 의해 보내지는 랜덤 형태의 토큰이다. 토큰은 유저를 확인하는데 쓰이며 유저의 접근을 확인할 때 사용되는 자원이다(?)
            - 세션 아이디 시퀀스 추측 공격: 일종의 무차별 대입 공격이다. 공격자가 임의의 세션 아이디를 만들어내서 무차별 대입 공격을 하는 것이다.
        1_3. URL 매개변수
            - 애플리케이션은 가끔 미리 지정한 URL 매개변수를 사용해 클라이언트를 통한 데이터 전송을 함
        1_4. 리퍼러 헤더
            - 브라우저들은 대부분의 HTTP 요청에 리퍼러(referer) 헤더를 포함하고 있음
            - referer 헤더: 해당 url에 대한 요청이 어떤 url에서 온 것인지를 나타내기 위해 쓰임. a 페이지 하이퍼링트를 통해 b 페이지로 이동했다면 리퍼러 헤더에는 a의 url이 저장됨
            - 개발자들이 쿠키나 referer와 같은 헤더들에 제시되는 값은 신뢰하기 때문에 취약점이 발생
            - 해킹 단계
                ㄴ1. 애플리케이션에서 숨은 폼, 쿠키, url 매개변수 등이 클라이언트를 통해 데이터를 전송하기 위해 사용되고 있는 곳들을 찾음
                ㄴ2. 데이터 값을 단서로 어떤 애플리케이션 로직이 작동되고 있는지 추측
                ㄴ3. 해당 데이터 값을 그 애플리케이션에서 사용되는 목적에 맞게 이리저리 바꿔본다. 처리 과정을 보면서 취약점 파악
        1_5. 변형된 데이터
        1_6. ASP.NET ViewState
            - asp.net: 웹 개발자가 동적 웹 사이트, 응용 프로그램 및 서비스를 구축 할 수 있도록 설계된 오픈 소스 프레임워크
            - viewstate: 클라이언트 측상태 관리 기술, 웹 페이지를 게시 할 때 페이지에 사용자 데이터를 저장하는 데 사용
            - asp.net viewstate: 페이지를 원래 위치에 다시 게시할 때 라운드 트립 간에 고유의 페이지 관련 값을 저장(간단히 현재 페이지 상채에 대한 정보를 가지고 있음), 페이지에서 숨겨진 필드로 유지, 라운드 트립 사이의 페이지 값과 컨트롤을 유지하는 기술
            - 드롭다운 리스트: 사용자가 하나 이상의 값을 선택 할 수 있는 리스트
            - viewstate 매개변수는 실제로 Base64 인코딩된 문자열로 매우 쉽게 디코딩 할 수 있음
            - Base64 방식으로 인코딩 된 것처럼 보이는 문자열 을 보고 디코딩을 할 때 아무런 의미있는 정보를 얻을 수 ㅇ없다면 문자열의 첫 4바이트를 순서대로 시작점으로 해서 디코딩을 해보라
            - 대부분의 애플리케이션은 EnableViewStateMac 옵션이 켜져있어 데이터가 해쉬화 되어있다.
            - 해킹 단계
                ㄴ1. ASP,NET 애플리케이션을 공격하는 경우 EnableViewStateMac 옵션이 적용됐는지 먼저 살펴본다./ ViewState 구조의 마지막 부분에 20바이트의 해시 값이 붙어있는지를 보면 됩
                ㄴ2. 애플리케이션의 다른 여러 페이지를 살펴보고 그 애플리케이션이 ViewState를 써서 어떤 민감한 정보를 클라이언트를 하여금 전송하게 하는지 살펴봄
                ㄴ3. ViewState 값의 구조를 보존한 채 변조해보고 에러 메시지가 나오는지 확인
                ㄴ4. 조작이 가능하면 각 매개변수가 어떤 기능을 하는지 살펴보고 고작된 값들을 각 매개변수 값으로 제시
                ㄴ5. 해시 옵션이 페이지 별로 별도로 적용되있을 수 있게 때문에 각 중요한 페이지 별로 해키 옵션이 켜져 있는지 살펴봄
    2. 사용자 데이터의 획득: HTML 폼
        - HTML 폼: 사용자로부터 입력 값을 받아서 이를 서버로 전송하는 가장 간단하고 보편적인 방식
        - 폼은 사용자가 제공한 데이터에 어떤 제약을 가하거나 유효성 검증을 하기 위한 형태로 설계되기도 함.
        2_1. 길이 제한
            - 입력 필등에 길이를 제한하는 속성이 있다면 요청을 가로 채서 길이 제한 속성을 삭제한 후 다시 보냄으로써 우회할 수 있음
            - 가로채기 문제
                ㄴ 서버 응답을 가로채서 변조하려 할 때 304 오류가 뜬다면 브라우저 캐시에 요청된 리소스(페이지)의 사본이 있는 경우이다.
                ㄴ Etag: 캐시 가능한 리소스에 서버가 부여하는 일종의 일련번호, 해당 리소스가 변경될 때마다 업데이트 됨
                ㄴ 브라우저가 캐시한 리소스를 가로채서 변조해야 하는 경우 이런 현상이 생기면 If-Modified-Since와 If-None-Match 헤더를 제거하면 됨
            - 리소스: HTTP 요청 대상, 문서, 사진 또는 다른 어떤 것이든 될 수 있음
        2_2. 스크립트 기반 검증
            - 폼 내의 입력 값 검증은 지나지게 간단하므로 스크립트 내에 커스터마이즈 된 클라이언트 측 입력 값 검증을 구현하는 것이 보편적
            - 커스터마이즈: 고객의 요구를 받아 제품을 만들다. 
            - 스크립트 함수를 이용하여 클라이언트 측 로직을 써서 폼 제출을 가로채게 함, 사용자의 입력값에 대한 정해진 검증을 수행, 입력 값을 받아들일지를 결정
            - 우회 방법
                ㄴ1. 브라우저 내의 자바 스크립트만 작동되지 않게 하면 우회할 수 있다. but 정상적인 작동을 위한 클라이언트 측 스크립트까지 작동하지 않을 수도 있음
                ㄴ2. 입력 값 검증이 끝난 후 서버로 전송되는 데이터를 가로채서 해당 값을 원하는 값으로 변호하여 우회할 수 있다.
                ㄴ3. 자바 스크립트의 함수를 조작해 무조건 참으로 만들면 됨
        2_3. 비활성화된 요소
            - HTML 폼의 어떤 요소가 비활성화되게 플래그가 설정돼있다면 수정, 사용이 불가능하고 이런 요소들은 서버로 전송되지 않음
            - input 태그에서는 disable=[참, 거짓] 속성을 사용해 비활성화
            - 이런 비활성화는 해당 매개변수가 이미 해당 애플리케이션에 의해 사용됐다는 것을 암시, 이 폼의 예전 버젼에서는 제품명이 숨겨져 있거나 수정 가능한 필드였을 수도 있다.
    3. 사용자 데이터의 획득: 씩 클라이언트 컴포넌트
        - 폼 이외에 사용자 데이터를 받아서 확인하고 제출하는 다른 주요한 방식은 씩 클라이언트 컴포넌트를 사용하는 것이다.
        - 씩 클라이언트 컴포넌트는 클라이언트의 운영체제 내에 있는 파일 시스템이나 레지스터리와 상호작용하면서 데이터를 받아들이기도 함.
        - 윈도우 레지스트리: 운영 체제의 설정과 선택 항목을 담고 있는 데이터베이스, 하드웨어와 소프트웨어에 대한 정보와 설정이 들어있음
        3_1. 자바 애플릿
            - 자바 애플릿: 자바 바이트코드 형태로 배포되는 애플릿
            - 애플릿: 플러그인의 하나로서 전용 위젯 엔진이나 더 큰 프로그램 범위 내에서 실행되는 특정한 작업을 수행하는 조그마한 응요 프로그램, 웹 프라우저, 제어판과 같은 다른 프로그램에서 실행되는 소프트웨어 구성요소로 볼 수 있음
            - 자바 바이트 코드: 자바 가상 머신이 실행하는 명령어의 형태
            - 샌드박스: 여러 가지 보안 문제를 경감시키는 보호 장치
            - 바이트코드: 특정 하드웨어가 아닌 가상 컴퓨터에서 돌아가는 실행 프로그램을 위한 이진 표현법, 소프트웨어에 의해 처리되기 때문에 기계어보다 더 추상적
            3_1_1. 자바 바이트코드의 디컴파일
                - 자바 바이트코드로 작성된 애플릿을 디컴파일해서 소스코드를 얻을 수 있음
                - 체크섬: 중복 검사의 한 형태로, 오류 정정을 통해 공간이나 기산 속에서 송신된 자요의 무결성을 보호하는 단순한 방법
                - JAR(자바 아카이브): 여러갱의 자바 클래스 파일과, 클래스들이 이용하는 관련 리소스 및 메타데이터를 하나의 파일로 모아서 자바 플랫폼에 응용 소프크웨어나 라이브러리를 배포하기 위한 소프트웨어 패키지 마일 포맷이다.
            3_1_2. 바이트코드 혼란 기법에 대응하기
                - 자바 바이트코드가 쉬게 디컴파일 돼 그 소스를 알기가 쉬우므로 바이트코드를 괴상하게 변형시키기 위한 여러 가지 기법들이 개발돼왔다.
                - 자주 쓰이는 변형 기법
                    ㄴ1. 의미 있는 값을 의미 없는 표현인 a, b, c 등의 값으로 치환
                    ㄴ2. 아이템 이름을 new 나 int와 같은 자바 키워드로 치환
                    ㄴ3. 스택 추척을 사용해 그 코드를 통해 수행되는 경로가 매우 꼬여있게 만들어 결과적으로 로직의 진행 경로를 디컴파일된 코드를 통해 이해하기 어렵게 함
                    ㄴ4. 접근할 수 없는 문장이나 반환문이 없는 코드 경로 등 허용 되지 않는 프로그래밍 방식을 사용
        3_2. 액티브X 컨트롤
            - 액티브x 컨트롤: 
            - 액티브x 메소드:
            3_2_1. 역공학
                - 역공학: 리버스 엔지니어링, 장치 또는 시스템의 기숭적인 원리를 구조분석을 통해 발견하는 과정이다.
                - 콜 스택: 컴퓨터 프로그램에서 현재 실행중인 서브루틴에 관한 정보를 저장하는 스택 자료구조이다.
                - 서브루틴: 소프트웨어에서 특정 동작을 수행하는 일정 코드 부분
            3_2_2. 엑스포티드 함수 조작
                - 엑스포티드 함수: 액티브x 컨트롤의 메소드 중 브라우저에 노출된 것들을 실행시켜 일부 터리 과정을 직접 수행하거나 조작해 볼 수 있음
            3_2_3. 컨트롤에 의해 처리된 입력 값의 고정
                - 접속을 시도하는 클라이언트 컴퓨터가 서버 측의 어떤 기능에 접근하게 허용하기 전에 특정 보안 기준을 충족시키는지 확인하는 용도로 액티브x 컨트롤이 쓰이기도 함
                - 액티브x 컨트롤은 전형적으로 해당 컴퓨터의 파일 시스템과 레지스트리의 값을 읽어서 확인하기 때문에 컨트롤이 읽어 들이는 정보를 보고 있다가 해당 보안 체크를 통과할 수 있는 임의의 입력값을 제공해 주면 무력화 시킬 수 있음
            3_2_4. 관리된 코드 디컴파일링
                - c#으로 작성된 씩 클라이언트 컴포넌트는 자바 애플릿과 마찬가지로 원래 소스코드로 디컴파일 할 수 있음
        3_3. 쇽 웨이브 플래시 객체
            - 쇼크웨이브 플래쉬:
            - 어도비 플래쉬: 응용 프로그램을 제작하는 데 사용되는 멀티미디어 및 소프트웨어 플랫폼ㅇ
            - 플래쉬 컴포넌트를 이용해서 게임 관련 소프트웨어의 조작을 할 수 있음
            - 플래쉬 객체:
            - SWF: 소크웨이브 플래쉬 파일 형식의 파일 확장자, small wev format을 나타냄, 비디오 및 벡터 기반 애니메이션과 사운드를 포함, 웹을 통해 효율적으로 전달하도록 설계되기도
            - flasm: swf 확장자 파일의 바이트코드를 위한 어셈블러와 디스어셈블러

    4. 클라이언트 즉 데이터의 안전한 처리
        - 웹 애플리케이션의 핵심적인 보안 문제는 클라이언트 측 컴포넌트와 사용자의 입력 값이 서버의 직접적인 통제 범위 밖이기 때문에 발생
        4_1. 클라이언트를 통한 데이터 전송
            - 사인을 이용하거나 데이터를 암호화하는 방법은 반복되는 공격에 취약점을 가지고 있다.
            - 중요 데이터가 히든 필드에 저장되기 전에 암호화 된다면 암호화된 데ㅐ이터를 복사해서 원래의 데이터가 있는 위치에 submit할 수 있다.
                ㄴ이러한 공격을 막기 위해 애플리케이션은 중요한 conteext를 암호화한 데이터와 함게 포함해야 한다.
                ㄴ암호화된 데이터에 특정 코드를 사용해서 하나의 데이터로 취급
            - 만약 공격자가 클라이언트로 보내진 암호화된 데이터를 알고 조작할 수 있다면 서버가 사용하는 암호키를 알아내기 위해 다양한 암호화 공격을 사용할 수 있을 것이다.
            - 이 공격이 성공한다면 그들은 임의의 값을 암호화하고 솔루션이 제공하는 보호기능을 우회할 수 있을 것이다.
        4_2. 클라이언트 생성 데이터의 확인
            - 클라이언트에서 만들어져서 서버로 전송되는 데이터는 원칙적으로 클라이언트에 안전하게 확인될 수 없다.
            - HTML 폼 필드와 자바 스크립트와 같은 가벼운 클라이언트 제어는 쉽게 우회할 수 있고, 서버로 전송된 입력값에 대해 보장할 수 없다.
            - 브라우저 확장 컴포넌트에서 실행하는 컨트롤은 가끔 우회하기 어렵지만, 시간만 있다면 충분히 공격할 수 있다.
            - 클라이언트 측 코드를 암호화 하거나 난독화하는 것은 공격자에게 추가적인 장애물을 제공하지만 공격자는 충분히 이것을 극복할 수 있다.
            - DRM(digital right managment): 디지털 권한 관리, 기술적 수잔을 사용하여 저작권이 있는 자료에 대한 액세스를 제어하는 모든 체계를 지칭
            - 클라이언트 측에서 만들어지는 모든 데이터는 오염되고 잠재적으로 악의적인 것으로 간주될 수 있다.
        4_3. 로깅과 경고
            - 애플리케이션이 유용성과 성능을 향상시키기 위해 길이 제한이나 자바 스크립트 기반의 확인과 같은 매커니즘을 사용하면, 이 매커니즘은 서버 측 침입 탐지 방어와 통합되어야 됨
            - 자바스크립트를 사용할 수 없는 브라우저를 사용하는 사용자가 자바스크립트를 사용하는 애플리케이션을 사용할 때 브라우저는 자바스크립트를 우회할 수도 있고 입력된 값이 그대로 submit 될 수 있다.
                ㄴ 이런 잠재성을 피하기 위해 로깅과 경고 매커니즘이 이런 동작을 인식해야 함





question
    - 세션 아이디와 토큰은 같은 것인가? 다르다면 차이는 무엇인가?
    - 매개 변수를 담고 있는 url은 get 방식으로 요청한 데이터인가?
    - round trip은 클라이언트와 서버가 데이터를 주고 받는 것을 말하는 것인가?
    - 폼은 입력값들의 모임을 한꺼번에 전송하는 것인가? 입력값 여러개를 서버로 한꺼번에 전송하고 싶을 때 폼을 사용?
    - 리소스는 무엇인가? 페이지를 말하는 것인가?
    - 커스터마이즈 된 입력값이 사용자가 원하는 데이터를 입력한 것인가? 정해져 있는 선택지 검색과 반대되는 것?
    - 씩 클라이언트의 정확한 뜻이 무엇인가?
    - 액티브x 와 액티브x 컨트롤은 무엇인가?
    - 엑스포티드 함수는 액티브x에서 제공하는 메소드인가?
    - 소크웨이브 플래쉬가 무엇인가?
    - 플래쉬 객체는 무엇인가? 플래쉬로 제작된 게임에서의 객체같은 것인가? 
    - 어도비 플래쉬와 쇼크웨이브 플래쉬는 같은거임?